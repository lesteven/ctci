Algorithms


Asymptotic Notation

Big O
- g(n) = O(f(n)) -> C * f(n) -> upper bound on g(n) (>=)
- greater than or equal to for some constant C

Big omega
- g(n) = Omega(f(n)) -> C * f(n) -> lower bound on g(n) (<=)
- less than or equal to for some constant C

Big theta
- g(n) = Theta(f(n)) -> C1 * f(n) -> Big O and C2 * f(n) -> Big omega

Little o
- g(n) = o(f(n)) -> C * f(n) -> upper bound on g(n) (>) 
- strictly greater than for all constants C

Little omega
- g(n) = Omega(f(n)) -> C * f(n) -> lower bound on g(n) (<) 
- strictly less than for all constants C


Order of growth

Constant O(1) or O(c)
- always run the same despite size of problem/set
- eg.
    - addition of two numbers.

Linear O(n)
- runs linearly with size of set
- eg.
    - function that counts array size

Logarithmic O(log n)
- cuts size of set in half after each iteration
- eg.
    - binary search

Linearithmic O(n log n)
- eg.
    - quick sort, merge sort

Quadratic O(n^2)
- eg.
    - bubble sort


Computational Complexity Theory

Deterministic
- algorithm, when given input will always produce same output.
- can be efficiently solved

Nondeterministic
- algorithm, when given input may not always produce same output.
  - b/c certain conditions may affect it's decision 

P (Polynomial Time)
- can be solved in polynomial time
  - upperbounded by polynomial function
  - n^k is polynomial time for some constant k, n is input 
    - (upper limit?)

NP (Nondeterministic polynomial time)
- nondeterministic algorithm that takes polynomial time
- decision problems that have efficient verifiable proof
- exponential time
  - k^n for some input n and constant k

NP-Complete
- no known efficient solution

NP hard
- encompasses NP-Complete
- as hard as hardest problems in NP

P vs NP
- whether problems with solutions that can quickly be verified
  be solved with an efficient algorithm (in polynomial time)

NP-Complete examples
- Boolean satisfiability problem (SAT)
  - 
- Integeter Partition
  - 
- Vertex cover
  - 
- Hamiltonian path
  - 

Recursive problems
- Master theorem

Summation
- use when there is for or while loop






